{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function () {\n  var ownKeys = function (o) {\n    ownKeys = Object.getOwnPropertyNames || function (o) {\n      var ar = [];\n      for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n      return ar;\n    };\n    return ownKeys(o);\n  };\n  return function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.series = void 0;\nexports.useLinking = useLinking;\nexports.getInitialURLWithTimeout = getInitialURLWithTimeout;\nconst native_1 = require(\"@react-navigation/native\");\nconst fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\nconst React = __importStar(require(\"react\"));\nconst createMemoryHistory_1 = require(\"./createMemoryHistory\");\nconst getPathFromState_1 = require(\"./getPathFromState\");\nconst serverLocationContext_1 = require(\"../global-state/serverLocationContext\");\nconst storeContext_1 = require(\"../global-state/storeContext\");\nconst utils_1 = require(\"../global-state/utils\");\nconst findMatchingState = (a, b) => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n  const aChildState = aRoute.state;\n  const bChildState = bRoute.state;\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n  return findMatchingState(aChildState, bChildState);\n};\nconst series = cb => {\n  let queue = Promise.resolve();\n  const callback = () => {\n    queue = queue.then(cb);\n  };\n  return callback;\n};\nexports.series = series;\nconst linkingHandlers = [];\nfunction useLinking(ref, {\n  enabled = true,\n  config,\n  getStateFromPath = native_1.getStateFromPath,\n  getPathFromState = native_1.getPathFromState,\n  getActionFromState = native_1.getActionFromState\n}, onUnhandledLinking) {\n  const independent = (0, native_1.useNavigationIndependentTree)();\n  const store = (0, storeContext_1.useExpoRouterStore)();\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n    if (independent) {\n      return undefined;\n    }\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n    const handler = Symbol();\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  const [history] = React.useState(createMemoryHistory_1.createMemoryHistory);\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  const validateRoutesNotExistInRootState = React.useCallback(state => {\n    const routeNames = (0, utils_1.getRootStackRouteNames)();\n    return state?.routes.some(r => !routeNames.includes(r.name));\n  }, [ref]);\n  const server = React.use(serverLocationContext_1.ServerContext);\n  const getInitialState = React.useCallback(() => {\n    let value;\n    if (enabledRef.current) {\n      const location = server?.location ?? (typeof window !== 'undefined' ? window.location : undefined);\n      const path = location ? location.pathname + location.search : undefined;\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n      onUnhandledLinking(path);\n    }\n    const thenable = {\n      then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, []);\n  const previousIndexRef = React.useRef(undefined);\n  const previousStateRef = React.useRef(undefined);\n  const pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n    return history.listen(() => {\n      const navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      const {\n        location\n      } = window;\n      const path = location.pathname + location.search + location.hash;\n      const index = history.index;\n      const previousIndex = previousIndexRef.current ?? 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n      const record = history.get(index);\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n      const state = getStateFromPathRef.current(path, configRef.current);\n      if (state) {\n        onUnhandledLinking(path);\n        if (validateRoutesNotExistInRootState(state)) {\n          return;\n        }\n        if (index > previousIndex || (index === previousIndex && (!record || `${record?.path}${location.hash}` === path))) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ? e.message : e}`);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    const getPathForRoute = (route, state) => {\n      let path;\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n        if (stateForPath) {\n          const focusedRoute = (0, native_1.findFocusedRoute)(stateForPath);\n          if (focusedRoute && focusedRoute.name === route.name && (0, fast_deep_equal_1.default)(Object.assign({}, focusedRoute.params), Object.assign({}, route.params))) {\n            path = (0, getPathFromState_1.appendBaseUrl)(route.path);\n          }\n        }\n      }\n      if (path == null) {\n        path = getPathFromStateRef.current(state, configRef.current);\n      }\n      return path;\n    };\n    if (ref.current) {\n      const rootState = ref.current.getRootState();\n      const state = store.state;\n      if (state) {\n        const route = (0, native_1.findFocusedRoute)(state);\n        const path = getPathForRoute(route, state);\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = rootState;\n        }\n        history.replace({\n          path,\n          state\n        });\n      }\n    }\n    const onStateChange = async () => {\n      const navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      const previousState = previousStateRef.current;\n      const rootState = navigation.getRootState();\n      const state = store.state;\n      if (!state) {\n        return;\n      }\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = (0, native_1.findFocusedRoute)(state);\n      const path = getPathForRoute(route, state);\n      previousStateRef.current = rootState;\n      pendingPopStatePathRef.current = undefined;\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n      if (previousFocusedState && focusedState && path !== pendingPath) {\n        const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n        if (historyDelta > 0) {\n          history.push({\n            path,\n            state\n          });\n        } else if (historyDelta < 0) {\n          const nextIndex = history.backIndex({\n            path\n          });\n          const currentIndex = history.index;\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex && history.get(nextIndex - currentIndex)) {\n              await history.go(nextIndex - currentIndex);\n            } else {\n              await history.go(historyDelta);\n            }\n            history.replace({\n              path,\n              state\n            });\n          } catch {}\n        } else {\n          history.replace({\n            path,\n            state\n          });\n        }\n      } else {\n        history.replace({\n          path,\n          state\n        });\n      }\n    };\n    return ref.current?.addListener('state', (0, exports.series)(onStateChange));\n  }, [enabled, history, ref]);\n  return {\n    getInitialState\n  };\n}\nfunction getInitialURLWithTimeout() {\n  return typeof window === 'undefined' ? '' : window.location.href;\n}","map":{"version":3,"names":["exports","useLinking","getInitialURLWithTimeout","native_1","require","fast_deep_equal_1","__importDefault","React","__importStar","createMemoryHistory_1","getPathFromState_1","serverLocationContext_1","storeContext_1","utils_1","findMatchingState","a","b","undefined","key","aHistoryLength","history","length","routes","bHistoryLength","aRoute","index","bRoute","aChildState","state","bChildState","series","cb","queue","Promise","resolve","callback","then","linkingHandlers","ref","enabled","config","getStateFromPath","getPathFromState","getActionFromState","onUnhandledLinking","independent","useNavigationIndependentTree","store","useExpoRouterStore","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","push","indexOf","splice","useState","createMemoryHistory","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","validateRoutesNotExistInRootState","useCallback","routeNames","getRootStackRouteNames","some","r","includes","name","server","use","ServerContext","getInitialState","value","location","window","path","pathname","search","thenable","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","listen","navigation","hash","previousIndex","record","get","resetRoot","action","dispatch","e","warn","message","getPathForRoute","route","stateForPath","focusedRoute","findFocusedRoute","default","Object","assign","params","appendBaseUrl","rootState","getRootState","replace","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","backIndex","currentIndex","go","addListener","href"],"sources":["C:\\Users\\Sasha\\Desktop\\hahaton\\hahaton-front\\node_modules\\expo-router\\src\\fork\\useLinking.ts"],"sourcesContent":["import {\n  LinkingOptions,\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  type NavigationContainerRef,\n  type NavigationState,\n  type ParamListBase,\n  useNavigationIndependentTree,\n} from '@react-navigation/native';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\n\nimport { createMemoryHistory } from './createMemoryHistory';\nimport { appendBaseUrl } from './getPathFromState';\nimport { ServerContext } from '../global-state/serverLocationContext';\nimport { useExpoRouterStore } from '../global-state/storeContext';\nimport { getRootStackRouteNames } from '../global-state/utils';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nexport const series = (cb: () => Promise<void>) => {\n  let queue = Promise.resolve();\n  const callback = () => {\n    queue = queue.then(cb);\n  };\n  return callback;\n};\n\nconst linkingHandlers: symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase>;\n\nexport function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase> | null>,\n  {\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options,\n  onUnhandledLinking: (lastUnhandledLining: string | undefined) => void\n) {\n  const independent = useNavigationIndependentTree();\n\n  const store = useExpoRouterStore();\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const validateRoutesNotExistInRootState = React.useCallback(\n    (state: ResultState) => {\n      // START FORK\n      // Instead of using the rootState, we use INTERNAL_SLOT_NAME, which is the only route in the root navigator in Expo Router\n      // const navigation = ref.current;\n      // const rootState = navigation?.getRootState();\n      const routeNames = getRootStackRouteNames();\n      // END FORK\n\n      // Make sure that the routes in the state exist in the root navigator\n      // Otherwise there's an error in the linking configuration\n      // START FORK\n      // return state?.routes.some((r) => !rootState?.routeNames?.includes(r.name));\n      return state?.routes.some((r) => !routeNames.includes(r.name));\n      // END FORK\n    },\n    [ref]\n  );\n\n  const server = React.use(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ?? (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n\n      // If the link were handled, it gets cleared in NavigationContainer\n      onUnhandledLinking(path);\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const { location } = window;\n\n      const path = location.pathname + location.search + location.hash;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // If the link were handled, it gets cleared in NavigationContainer\n        onUnhandledLinking(path);\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        if (validateRoutesNotExistInRootState(state)) {\n          return;\n        }\n\n        if (\n          index > previousIndex ||\n          /* START FORK\n           *\n           * This is a workaround for React Navigation's handling of hashes (it doesn't handle them)\n           * When you click on <a href=\"#hash\">, the browser will first fire a popstate event\n           * and this callback will be called.\n           *\n           * From React Navigation's perspective, it's treating the new hash change like a back/forward\n           * button press, so it thinks it should reset the state. When we should\n           * be to be pushing the new state\n           *\n           * Our fix is to check if the index is the same as the previous index\n           * and if the incoming path is the same as the old path but with the hash added,\n           * then treat it as a push instead of a reset\n           *\n           * This also works for subsequent hash changes, as internally RN\n           * doesn't store the hash in the history state.\n           *\n           * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event#when_popstate_is_sent\n           */\n          (index === previousIndex && (!record || `${record?.path}${location.hash}` === path))\n          // END FORK\n        ) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${\n                  typeof e === 'object' && e != null && 'message' in e ? e.message : e\n                }`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (\n      route: ReturnType<typeof findFocusedRoute>,\n      state: NavigationState\n    ): string => {\n      let path;\n\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (\n            focusedRoute &&\n            focusedRoute.name === route.name &&\n            isEqual({ ...focusedRoute.params }, { ...route.params })\n          ) {\n            // START FORK - Ensure paths coming from events (e.g refresh) have the base URL\n            // path = route.path;\n            path = appendBaseUrl(route.path);\n            // END FORK\n          }\n        }\n      }\n\n      if (path == null) {\n        path = getPathFromStateRef.current(state, configRef.current);\n      }\n\n      // START FORK - ExpoRouter manually handles hashes. This code is intentionally removed\n      // const previousRoute = previousStateRef.current\n      //   ? findFocusedRoute(previousStateRef.current)\n      //   : undefined;\n\n      // Preserve the hash if the route didn't change\n      // if (\n      //   previousRoute &&\n      //   route &&\n      //   'key' in previousRoute &&\n      //   'key' in route &&\n      //   previousRoute.key === route.key\n      // ) {\n      //   path = path + location.hash;\n      // }\n      // END FORK\n\n      return path;\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n\n      // START FORK\n      // Instead of using the rootState (which might be stale) we should use the focused state\n      // const state = ref.current.getRootState();\n      const rootState = ref.current.getRootState();\n      const state = store.state as NavigationState;\n\n      // END FORK\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          // START FORK\n          // previousStateRef.current = state;\n          previousStateRef.current = rootState;\n          // END FORK\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      // START FORK\n      // Instead of using the rootState (which might be stale) we should use the focused state\n      // const state = navigation.getRootState();\n      const rootState = navigation.getRootState();\n      const state = store.state as NavigationState;\n\n      // END FORK\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n\n      // START FORK\n      // previousStateRef.current = state;\n      previousStateRef.current = rootState;\n      // END FORK\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history ? focusedState.history.length : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (\n              nextIndex !== -1 &&\n              nextIndex < currentIndex &&\n              // We should only go back if the entry exists and it's less than current index\n              history.get(nextIndex - currentIndex)\n            ) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  }, [enabled, history, ref]);\n\n  return {\n    getInitialState,\n  };\n}\n\nexport function getInitialURLWithTimeout(): string | null | Promise<string | null> {\n  return typeof window === 'undefined' ? '' : window.location.href;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}